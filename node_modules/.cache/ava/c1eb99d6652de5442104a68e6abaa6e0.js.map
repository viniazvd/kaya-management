{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","t","user","destroy","truncate","after","always","userTest1","name","email","password","userTest2","newUser1","build","newUser2","save","list","findAndCountAll","console","log","count","is"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEAN,KAAK,WAAL,EAAkB,MAAMG,CAAN,IAAW;AAC3B,QAAMM,YAAY,EAAEC,MAAM,WAAR,EAAqBC,OAAO,sBAA5B,EAAoDC,UAAU,KAA9D,EAAlB;AACA,QAAMC,YAAY,EAAEH,MAAM,WAAR,EAAqBC,OAAO,sBAA5B,EAAoDC,UAAU,KAA9D,EAAlB;AACA,QAAME,WAAW,MAAMb,OAAOG,IAAP,CAAYW,KAAZ,CAAkBN,SAAlB,CAAvB;AACA,QAAMO,WAAW,MAAMf,OAAOG,IAAP,CAAYW,KAAZ,CAAkBF,SAAlB,CAAvB;AACA,QAAMC,SAASG,IAAT,EAAN;AACA,QAAMD,SAASC,IAAT,EAAN;;AAEA,QAAMC,OAAO,MAAMjB,OAAOG,IAAP,CAAYe,eAAZ,EAAnB;AACAC,UAAQC,GAAR,CAAYH,KAAKI,KAAjB;AACAnB,IAAEoB,EAAF,CAAKL,KAAKI,KAAV,EAAiB,CAAjB;AACD,CAXD;;AAaA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy({truncate: true}))\ntest.after.always(t => models.user.destroy({truncate: true}))\n\ntest('list user', async t => {\n  const userTest1 = { name: 'vinitest1', email: 'emailtest1@gmail.com', password: '123' }\n  const userTest2 = { name: 'vinitest2', email: 'emailtest2@gmail.com', password: '123' }\n  const newUser1 = await models.user.build(userTest1)\n  const newUser2 = await models.user.build(userTest2)\n  await newUser1.save()\n  await newUser2.save()\n\n  const list = await models.user.findAndCountAll()\n  console.log(list.count)\n  t.is(list.count, 2)\n})\n\n// test('create user', async t => {\n//   const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n//   const newUser = await models.user.build(userTest)\n//   const result = await newUser.save()\n\n//   t.is(result.dataValues.email, 'emailtest@gmail.com')\n// })\n\n// test('remove user', async t => {\n//   const userTest = { email: 'remover@gmail.com' }\n//   const newUser = await models.user.build(userTest)\n//   await newUser.save()\n\n//   const removed = await models.user.destroy({ where: { email: 'remover@gmail.com' } })\n\n//   t.is(removed, 1)\n// })\n\n// test('update user', async t => {\n//   const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n//   const newUser = await models.user.build(userTest)\n//   await newUser.save()\n\n//   const userUpdated = { email: 'emailtest2@gmail.com' }\n//   const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n//   t.is(updated[0], 3)\n// })\n"]}