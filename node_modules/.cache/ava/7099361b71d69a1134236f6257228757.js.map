{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","t","user","destroy","truncate","after","always","serial","userTest1","name","email","password","userTest2","newUser1","build","newUser2","save","list","findAndCountAll","is","count","userTest","newUser","result","dataValues","removed","where","userUpdated","updated","update"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEAN,KAAKS,MAAL,CAAY,WAAZ,EAAyB,MAAMN,CAAN,IAAW;AAClC,QAAMO,YAAY,EAAEC,MAAM,WAAR,EAAqBC,OAAO,sBAA5B,EAAoDC,UAAU,KAA9D,EAAlB;AACA,QAAMC,YAAY,EAAEH,MAAM,WAAR,EAAqBC,OAAO,sBAA5B,EAAoDC,UAAU,KAA9D,EAAlB;AACA,QAAME,WAAW,MAAMd,OAAOG,IAAP,CAAYY,KAAZ,CAAkBN,SAAlB,CAAvB;AACA,QAAMO,WAAW,MAAMhB,OAAOG,IAAP,CAAYY,KAAZ,CAAkBF,SAAlB,CAAvB;AACA,QAAMC,SAASG,IAAT,EAAN;AACA,QAAMD,SAASC,IAAT,EAAN;;AAEA,QAAMC,OAAO,MAAMlB,OAAOG,IAAP,CAAYgB,eAAZ,EAAnB;AACAjB,IAAEkB,EAAF,CAAKF,KAAKG,KAAV,EAAiB,CAAjB;AACD,CAVD;;AAYAtB,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMoB,WAAW,EAAEZ,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMW,UAAU,MAAMvB,OAAOG,IAAP,CAAYY,KAAZ,CAAkBO,QAAlB,CAAtB;AACA,QAAME,SAAS,MAAMD,QAAQN,IAAR,EAArB;;AAEAf,IAAEkB,EAAF,CAAKI,OAAOC,UAAP,CAAkBd,KAAvB,EAA8B,qBAA9B;AACD,CAND;;AAQAZ,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMoB,WAAW,EAAEX,OAAO,mBAAT,EAAjB;AACA,QAAMY,UAAU,MAAMvB,OAAOG,IAAP,CAAYY,KAAZ,CAAkBO,QAAlB,CAAtB;AACA,QAAMC,QAAQN,IAAR,EAAN;;AAEA,QAAMS,UAAU,MAAM1B,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAAEuB,OAAO,EAAEhB,OAAO,mBAAT,EAAT,EAApB,CAAtB;;AAEAT,IAAEkB,EAAF,CAAKM,OAAL,EAAc,CAAd;AACD,CARD;;AAUA3B,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMoB,WAAW,EAAEZ,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMW,UAAU,MAAMvB,OAAOG,IAAP,CAAYY,KAAZ,CAAkBO,QAAlB,CAAtB;AACA,QAAMC,QAAQN,IAAR,EAAN;;AAEA,QAAMW,cAAc,EAAEjB,OAAO,sBAAT,EAApB;AACA,QAAMkB,UAAU,MAAM7B,OAAOG,IAAP,CAAY2B,MAAZ,CAAmBF,WAAnB,EAAgC,EAAED,OAAO,EAAEhB,OAAO,qBAAT,EAAT,EAAhC,CAAtB;;AAEAT,IAAEkB,EAAF,CAAKS,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy({truncate: true}))\ntest.after.always(t => models.user.destroy({truncate: true}))\n\ntest.serial('list user', async t => {\n  const userTest1 = { name: 'vinitest1', email: 'emailtest1@gmail.com', password: '123' }\n  const userTest2 = { name: 'vinitest2', email: 'emailtest2@gmail.com', password: '123' }\n  const newUser1 = await models.user.build(userTest1)\n  const newUser2 = await models.user.build(userTest2)\n  await newUser1.save()\n  await newUser2.save()\n\n  const list = await models.user.findAndCountAll()\n  t.is(list.count, 1)\n})\n\ntest.serial('create user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.email, 'emailtest@gmail.com')\n})\n\ntest.serial('remove user', async t => {\n  const userTest = { email: 'remover@gmail.com' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const removed = await models.user.destroy({ where: { email: 'remover@gmail.com' } })\n\n  t.is(removed, 1)\n})\n\ntest.serial('update user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const userUpdated = { email: 'emailtest2@gmail.com' }\n  const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n  t.is(updated[0], 1)\n})\n"]}