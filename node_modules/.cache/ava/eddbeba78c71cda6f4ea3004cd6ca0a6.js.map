{"version":3,"sources":["auth.test.js"],"names":["require","config","isValid","encrypt","test","models","beforeEach","t","user","destroy","truncate","after","always","serial","name","email","password","newUser","build","result","save","is","dataValues","passwordEncrypted","isMatch","console","log","count"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,UAAUF,QAAQ,oCAAR,CAAhB;AACA,MAAMG,UAAUH,QAAQ,0BAAR,CAAhB;AACA,MAAMI,OAAOJ,QAAQ,KAAR,CAAb;AACA,MAAMK,SAASL,QAAQ,iCAAR,CAAf;;AAEAI,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEAN,KAAKS,MAAL,CAAY,QAAZ,EAAsB,MAAMN,CAAN,IAAW;AAC/B,QAAMC,OAAO,EAAEM,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAb;AACA,QAAMC,UAAU,MAAMZ,OAAOG,IAAP,CAAYU,KAAZ,CAAkBV,IAAlB,CAAtB;AACA,QAAMW,SAAS,MAAMF,QAAQG,IAAR,EAArB;;AAEAb,IAAEc,EAAF,CAAKF,OAAOG,UAAP,CAAkBP,KAAvB,EAA8B,qBAA9B;AACD,CAND;;AAQAX,KAAKS,MAAL,CAAY,QAAZ,EAAsB,MAAMN,CAAN,IAAW;AAC/B,QAAMgB,oBAAoB,MAAMpB,QAAQ,KAAR,CAAhC;AACA,QAAMK,OAAO,EAAEM,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAUO,iBAA5D,EAAb;AACA,QAAMN,UAAU,MAAMZ,OAAOG,IAAP,CAAYU,KAAZ,CAAkBV,IAAlB,CAAtB;AACA,QAAMW,SAAS,MAAMF,QAAQG,IAAR,EAArB;;AAEA,QAAMI,UAAU,MAAMtB,QAAQ,KAAR,EAAeM,KAAKQ,QAApB,CAAtB;;AAEAS,UAAQC,GAAR,CAAYP,OAAOQ,KAAnB;AACApB,IAAEc,EAAF,CAAKF,OAAOG,UAAP,CAAkBP,KAAvB,EAA8B,qBAA9B;AACAR,IAAEc,EAAF,CAAKG,OAAL,EAAc,IAAd;AACD,CAXD","file":"auth.test.js","sourcesContent":["require('dotenv').config()\n\nconst isValid = require('../../../support/compare-passwords')\nconst encrypt = require('../../../support/encrypt')\nconst test = require('ava')\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy({truncate: true}))\ntest.after.always(t => models.user.destroy({truncate: true}))\n\ntest.serial('signup', async t => {\n  const user = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(user)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.email, 'emailtest@gmail.com')\n})\n\ntest.serial('signin', async t => {\n  const passwordEncrypted = await encrypt('123')\n  const user = { name: 'vinitest', email: 'emailtest@gmail.com', password: passwordEncrypted }\n  const newUser = await models.user.build(user)\n  const result = await newUser.save()\n\n  const isMatch = await isValid('123', user.password)\n\n  console.log(result.count)\n  t.is(result.dataValues.email, 'emailtest@gmail.com')\n  t.is(isMatch, true)\n})\n"]}