{"version":3,"sources":["clients.test.js"],"names":["require","config","test","models","beforeEach","t","Client","destroy","truncate","after","always","serial","userTest","name","email","password","newUser","build","save","list","findAndCountAll","is","count","result","dataValues","removed","where","userUpdated","updated","update"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,MAAP,CAAcC,OAAd,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,MAAP,CAAcC,OAAd,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAvB;;AAEAN,KAAKS,MAAL,CAAY,WAAZ,EAAyB,MAAMN,CAAN,IAAW;AAClC,QAAMO,WAAW,EAAEC,MAAM,WAAR,EAAqBC,OAAO,sBAA5B,EAAoDC,UAAU,KAA9D,EAAjB;AACA,QAAMC,UAAU,MAAMb,OAAOG,MAAP,CAAcW,KAAd,CAAoBL,QAApB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMC,OAAO,MAAMhB,OAAOG,MAAP,CAAcc,eAAd,EAAnB;AACAf,IAAEgB,EAAF,CAAKF,KAAKG,KAAV,EAAiB,CAAjB;AACD,CAPD;;AASApB,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMb,OAAOG,MAAP,CAAcW,KAAd,CAAoBL,QAApB,CAAtB;AACA,QAAMW,SAAS,MAAMP,QAAQE,IAAR,EAArB;;AAEAb,IAAEgB,EAAF,CAAKE,OAAOC,UAAP,CAAkBV,KAAvB,EAA8B,qBAA9B;AACD,CAND;;AAQAZ,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEE,OAAO,mBAAT,EAAjB;AACA,QAAME,UAAU,MAAMb,OAAOG,MAAP,CAAcW,KAAd,CAAoBL,QAApB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMO,UAAU,MAAMtB,OAAOG,MAAP,CAAcC,OAAd,CAAsB,EAAEmB,OAAO,EAAEZ,OAAO,mBAAT,EAAT,EAAtB,CAAtB;;AAEAT,IAAEgB,EAAF,CAAKI,OAAL,EAAc,CAAd;AACD,CARD;;AAUAvB,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMb,OAAOG,MAAP,CAAcW,KAAd,CAAoBL,QAApB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMS,cAAc,EAAEb,OAAO,sBAAT,EAApB;AACA,QAAMc,UAAU,MAAMzB,OAAOG,MAAP,CAAcuB,MAAd,CAAqBF,WAArB,EAAkC,EAAED,OAAO,EAAEZ,OAAO,qBAAT,EAAT,EAAlC,CAAtB;;AAEAT,IAAEgB,EAAF,CAAKO,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD","file":"clients.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.Client.destroy({truncate: true}))\ntest.after.always(t => models.Client.destroy({truncate: true}))\n\ntest.serial('list user', async t => {\n  const userTest = { name: 'vinitest1', email: 'emailtest1@gmail.com', password: '123' }\n  const newUser = await models.Client.build(userTest)\n  await newUser.save()\n\n  const list = await models.Client.findAndCountAll()\n  t.is(list.count, 1)\n})\n\ntest.serial('create user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.Client.build(userTest)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.email, 'emailtest@gmail.com')\n})\n\ntest.serial('remove user', async t => {\n  const userTest = { email: 'remover@gmail.com' }\n  const newUser = await models.Client.build(userTest)\n  await newUser.save()\n\n  const removed = await models.Client.destroy({ where: { email: 'remover@gmail.com' } })\n\n  t.is(removed, 1)\n})\n\ntest.serial('update user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.Client.build(userTest)\n  await newUser.save()\n\n  const userUpdated = { email: 'emailtest2@gmail.com' }\n  const updated = await models.Client.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n  t.is(updated[0], 1)\n})\n"]}