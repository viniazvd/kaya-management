{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","t","user","destroy","truncate","after","always","sync","userTest","name","email","password","newUser","build","result","save","is","dataValues","removed","where"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEAN,KAAKS,IAAL,CAAU,aAAV,EAAyB,MAAMN,CAAN,IAAW;AAClC,QAAMO,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMb,OAAOG,IAAP,CAAYW,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMM,SAAS,MAAMF,QAAQG,IAAR,EAArB;;AAEAd,IAAEe,EAAF,CAAKF,OAAOG,UAAP,CAAkBP,KAAvB,EAA8B,qBAA9B;AACD,CAND;;AAQAZ,KAAK,aAAL,EAAoB,MAAMG,CAAN,IAAW;AAC7B,QAAMO,WAAW,EAAEE,OAAO,mBAAT,EAAjB;AACA,QAAME,UAAU,MAAMb,OAAOG,IAAP,CAAYW,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQG,IAAR,EAAN;;AAEA,QAAMG,UAAU,MAAMnB,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAAEgB,OAAO,EAAET,OAAO,mBAAT,EAAT,EAApB,CAAtB;;AAEAT,IAAEe,EAAF,CAAKE,OAAL,EAAc,CAAd;AACD,CARD;;AAUA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy({truncate: true}))\ntest.after.always(t => models.user.destroy({truncate: true}))\n\n// test('list user', async t => {\n//   const userTest1 = { name: 'vinitest1', email: 'emailtest1@gmail.com', password: '123' }\n//   const userTest2 = { name: 'vinitest2', email: 'emailtest2@gmail.com', password: '123' }\n//   const newUser1 = await models.user.build(userTest1)\n//   const newUser2 = await models.user.build(userTest2)\n//   await newUser1.save()\n//   await newUser2.save()\n\n//   const list = await models.user.findAndCountAll()\n//   t.is(list.count, 2)\n// })\n\ntest.sync('create user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.email, 'emailtest@gmail.com')\n})\n\ntest('remove user', async t => {\n  const userTest = { email: 'remover@gmail.com' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const removed = await models.user.destroy({ where: { email: 'remover@gmail.com' } })\n\n  t.is(removed, 1)\n})\n\n// test('update user', async t => {\n//   const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n//   const newUser = await models.user.build(userTest)\n//   await newUser.save()\n\n//   const userUpdated = { email: 'emailtest2@gmail.com' }\n//   const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n//   t.is(updated[0], 1)\n// })\n"]}