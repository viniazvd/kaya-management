{"version":3,"sources":["activities.test.js"],"names":["require","config","test","models","beforeEach","t","Activity","destroy","truncate","after","always","serial","activityTest","name","newActivity","build","save","list","findAndCountAll","is","count","result","dataValues","removed","where","activityUpdated","updated","update"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,QAAP,CAAgBC,OAAhB,CAAwB,EAACC,UAAU,IAAX,EAAxB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,QAAP,CAAgBC,OAAhB,CAAwB,EAACC,UAAU,IAAX,EAAxB,CAAvB;;AAEAN,KAAKS,MAAL,CAAY,eAAZ,EAA6B,MAAMN,CAAN,IAAW;AACtC,QAAMO,eAAe,EAAEC,MAAM,OAAR,EAArB;AACA,QAAMC,cAAc,MAAMX,OAAOG,QAAP,CAAgBS,KAAhB,CAAsBH,YAAtB,CAA1B;AACA,QAAME,YAAYE,IAAZ,EAAN;;AAEA,QAAMC,OAAO,MAAMd,OAAOG,QAAP,CAAgBY,eAAhB,EAAnB;AACAb,IAAEc,EAAF,CAAKF,KAAKG,KAAV,EAAiB,CAAjB;AACD,CAPD;;AASAlB,KAAKS,MAAL,CAAY,iBAAZ,EAA+B,MAAMN,CAAN,IAAW;AACxC,QAAMO,eAAe,EAAEC,MAAM,OAAR,EAArB;AACA,QAAMC,cAAc,MAAMX,OAAOG,QAAP,CAAgBS,KAAhB,CAAsBH,YAAtB,CAA1B;AACA,QAAMS,SAAS,MAAMP,YAAYE,IAAZ,EAArB;;AAEAX,IAAEc,EAAF,CAAKE,OAAOC,UAAP,CAAkBT,IAAvB,EAA6B,OAA7B;AACD,CAND;;AAQAX,KAAKS,MAAL,CAAY,iBAAZ,EAA+B,MAAMN,CAAN,IAAW;AACxC,QAAMO,eAAe,EAAEC,MAAM,OAAR,EAArB;AACA,QAAMC,cAAc,MAAMX,OAAOG,QAAP,CAAgBS,KAAhB,CAAsBH,YAAtB,CAA1B;AACA,QAAME,YAAYE,IAAZ,EAAN;;AAEA,QAAMO,UAAU,MAAMpB,OAAOG,QAAP,CAAgBC,OAAhB,CAAwB,EAAEiB,OAAO,EAAEX,MAAM,OAAR,EAAT,EAAxB,CAAtB;;AAEAR,IAAEc,EAAF,CAAKI,OAAL,EAAc,CAAd;AACD,CARD;;AAUArB,KAAKS,MAAL,CAAY,iBAAZ,EAA+B,MAAMN,CAAN,IAAW;AACxC,QAAMO,eAAe,EAAEC,MAAM,OAAR,EAArB;AACA,QAAMC,cAAc,MAAMX,OAAOG,QAAP,CAAgBS,KAAhB,CAAsBH,YAAtB,CAA1B;AACA,QAAME,YAAYE,IAAZ,EAAN;;AAEA,QAAMS,kBAAkB,EAAEZ,MAAM,OAAR,EAAxB;AACA,QAAMa,UAAU,MAAMvB,OAAOG,QAAP,CAAgBqB,MAAhB,CAAuBF,eAAvB,EAAwC,EAAED,OAAO,EAAEX,MAAM,OAAR,EAAT,EAAxC,CAAtB;;AAEAR,IAAEc,EAAF,CAAKO,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD","file":"activities.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.Activity.destroy({truncate: true}))\ntest.after.always(t => models.Activity.destroy({truncate: true}))\n\ntest.serial('list activity', async t => {\n  const activityTest = { name: 'nameX' }\n  const newActivity = await models.Activity.build(activityTest)\n  await newActivity.save()\n\n  const list = await models.Activity.findAndCountAll()\n  t.is(list.count, 1)\n})\n\ntest.serial('create activity', async t => {\n  const activityTest = { name: 'nameX' }\n  const newActivity = await models.Activity.build(activityTest)\n  const result = await newActivity.save()\n\n  t.is(result.dataValues.name, 'nameX')\n})\n\ntest.serial('remove activity', async t => {\n  const activityTest = { name: 'nameX' }\n  const newActivity = await models.Activity.build(activityTest)\n  await newActivity.save()\n\n  const removed = await models.Activity.destroy({ where: { name: 'nameX' } })\n\n  t.is(removed, 1)\n})\n\ntest.serial('update activity', async t => {\n  const activityTest = { name: 'nameX' }\n  const newActivity = await models.Activity.build(activityTest)\n  await newActivity.save()\n\n  const activityUpdated = { name: 'nameX' }\n  const updated = await models.Activity.update(activityUpdated, { where: { name: 'nameX' } })\n\n  t.is(updated[0], 1)\n})\n"]}