{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","user","destroy","truncate","after","always","t","userTest","name","email","password","newUser","build","result","save","is","dataValues","userUpdated","updated","update","where","removed"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgB,MAAMD,OAAOE,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAtB;AACAL,KAAKM,KAAL,CAAWC,MAAX,CAAkB,MAAMN,OAAOE,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAxB;;AAEAL,KAAK,aAAL,EAAoB,MAAMQ,CAAN,IAAW;AAC7B,QAAMC,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMZ,OAAOE,IAAP,CAAYW,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMM,SAAS,MAAMF,QAAQG,IAAR,EAArB;;AAEAR,IAAES,EAAF,CAAKF,OAAOG,UAAP,CAAkBR,IAAvB,EAA6B,UAA7B;AACD,CAND;;AAQAV,KAAK,aAAL,EAAoB,MAAMQ,CAAN,IAAW;AAC7B,QAAMC,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMZ,OAAOE,IAAP,CAAYW,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQG,IAAR,EAAN;;AAEA,QAAMG,cAAc,EAAER,OAAO,sBAAT,EAApB;AACA,QAAMS,UAAU,MAAMnB,OAAOE,IAAP,CAAYkB,MAAZ,CAAmBF,WAAnB,EAAgC,EAAEG,OAAO,EAAEX,OAAO,qBAAT,EAAT,EAAhC,CAAtB;;AAEAH,IAAES,EAAF,CAAKG,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD;;AAWApB,KAAK,aAAL,EAAoB,MAAMQ,CAAN,IAAW;AAC7B,QAAMC,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMZ,OAAOE,IAAP,CAAYW,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQG,IAAR,EAAN;;AAEA,QAAMO,UAAU,MAAMtB,OAAOE,IAAP,CAAYC,OAAZ,CAAoB,EAAEkB,OAAO,EAAEX,OAAO,qBAAT,EAAT,EAApB,CAAtB;;AAEAH,IAAES,EAAF,CAAKM,OAAL,EAAc,CAAd;AACD,CARD","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(() => models.user.destroy({truncate: true}))\ntest.after.always(() => models.user.destroy({truncate: true}))\n\ntest('create user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.name, 'vinitest')\n})\n\ntest('update user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const userUpdated = { email: 'emailtest2@gmail.com' }\n  const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n  t.is(updated[0], 2)\n})\n\ntest('remove user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const removed = await models.user.destroy({ where: { email: 'emailtest@gmail.com' } })\n\n  t.is(removed, 1)\n})\n"]}