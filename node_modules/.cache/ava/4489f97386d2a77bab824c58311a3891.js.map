{"version":3,"sources":["tasks.test.js"],"names":["require","config","test","models","beforeEach","t","Task","destroy","truncate","after","always","serial","taskTest","name","newTask","build","save","list","findAndCountAll","is","count","result","dataValues","removed","where","taskUpdated","updated","update"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEAN,KAAKS,MAAL,CAAY,WAAZ,EAAyB,MAAMN,CAAN,IAAW;AAClC,QAAMO,WAAW,EAAEC,MAAM,OAAR,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBH,QAAlB,CAAtB;AACA,QAAME,QAAQE,IAAR,EAAN;;AAEA,QAAMC,OAAO,MAAMd,OAAOG,IAAP,CAAYY,eAAZ,EAAnB;AACAb,IAAEc,EAAF,CAAKF,KAAKG,KAAV,EAAiB,CAAjB;AACD,CAPD;;AASAlB,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEC,MAAM,OAAR,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBH,QAAlB,CAAtB;AACA,QAAMS,SAAS,MAAMP,QAAQE,IAAR,EAArB;;AAEAX,IAAEc,EAAF,CAAKE,OAAOC,UAAP,CAAkBT,IAAvB,EAA6B,OAA7B;AACD,CAND;;AAQAX,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEC,MAAM,OAAR,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBH,QAAlB,CAAtB;AACA,QAAME,QAAQE,IAAR,EAAN;;AAEA,QAAMO,UAAU,MAAMpB,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAAEiB,OAAO,EAAEX,MAAM,OAAR,EAAT,EAApB,CAAtB;;AAEAR,IAAEc,EAAF,CAAKI,OAAL,EAAc,CAAd;AACD,CARD;;AAUArB,KAAKS,MAAL,CAAY,aAAZ,EAA2B,MAAMN,CAAN,IAAW;AACpC,QAAMO,WAAW,EAAEC,MAAM,OAAR,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBH,QAAlB,CAAtB;AACA,QAAME,QAAQE,IAAR,EAAN;;AAEA,QAAMS,cAAc,EAAEZ,MAAM,OAAR,EAApB;AACA,QAAMa,UAAU,MAAMvB,OAAOG,IAAP,CAAYqB,MAAZ,CAAmBF,WAAnB,EAAgC,EAAED,OAAO,EAAEX,MAAM,OAAR,EAAT,EAAhC,CAAtB;;AAEAR,IAAEc,EAAF,CAAKO,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD","file":"tasks.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.Task.destroy({truncate: true}))\ntest.after.always(t => models.Task.destroy({truncate: true}))\n\ntest.serial('list task', async t => {\n  const taskTest = { name: 'nameX' }\n  const newTask = await models.Task.build(taskTest)\n  await newTask.save()\n\n  const list = await models.Task.findAndCountAll()\n  t.is(list.count, 1)\n})\n\ntest.serial('create task', async t => {\n  const taskTest = { name: 'nameX' }\n  const newTask = await models.Task.build(taskTest)\n  const result = await newTask.save()\n\n  t.is(result.dataValues.name, 'nameX')\n})\n\ntest.serial('remove task', async t => {\n  const taskTest = { name: 'nameX' }\n  const newTask = await models.Task.build(taskTest)\n  await newTask.save()\n\n  const removed = await models.Task.destroy({ where: { name: 'nameX' } })\n\n  t.is(removed, 1)\n})\n\ntest.serial('update task', async t => {\n  const taskTest = { name: 'nameX' }\n  const newTask = await models.Task.build(taskTest)\n  await newTask.save()\n\n  const taskUpdated = { name: 'nameX' }\n  const updated = await models.Task.update(taskUpdated, { where: { name: 'nameX' } })\n\n  t.is(updated[0], 1)\n})\n"]}