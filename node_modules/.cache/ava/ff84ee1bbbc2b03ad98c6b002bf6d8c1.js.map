{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","t","user","destroy","after","always","userTest","name","email","password","newUser","build","save","list","findAndCountAll","is","count","result","dataValues","removed","where","userUpdated","updated","update"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,EAArB;AACAL,KAAKM,KAAL,CAAWC,MAAX,CAAkBJ,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,EAAvB;;AAEAL,KAAK,WAAL,EAAkB,MAAMG,CAAN,IAAW;AAC3B,QAAMK,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMC,OAAO,MAAMd,OAAOG,IAAP,CAAYY,eAAZ,EAAnB;;AAEAb,IAAEc,EAAF,CAAKF,KAAKG,KAAV,EAAiB,CAAjB;AACD,CARD;;AAUAlB,KAAK,aAAL,EAAoB,MAAMG,CAAN,IAAW;AAC7B,QAAMK,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMW,SAAS,MAAMP,QAAQE,IAAR,EAArB;;AAEAX,IAAEc,EAAF,CAAKE,OAAOC,UAAP,CAAkBX,IAAvB,EAA6B,UAA7B;AACD,CAND;;AAQAT,KAAK,aAAL,EAAoB,MAAMG,CAAN,IAAW;AAC7B,QAAMK,WAAW,EAAEE,OAAO,mBAAT,EAAjB;AACA,QAAME,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMO,UAAU,MAAMpB,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAAEiB,OAAO,EAAEZ,OAAO,mBAAT,EAAT,EAApB,CAAtB;;AAEAP,IAAEc,EAAF,CAAKI,OAAL,EAAc,CAAd;AACD,CARD;;AAUArB,KAAK,aAAL,EAAoB,MAAMG,CAAN,IAAW;AAC7B,QAAMK,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMX,OAAOG,IAAP,CAAYS,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMS,cAAc,EAAEb,OAAO,sBAAT,EAApB;AACA,QAAMc,UAAU,MAAMvB,OAAOG,IAAP,CAAYqB,MAAZ,CAAmBF,WAAnB,EAAgC,EAAED,OAAO,EAAEZ,OAAO,qBAAT,EAAT,EAAhC,CAAtB;;AAEAP,IAAEc,EAAF,CAAKO,QAAQ,CAAR,CAAL,EAAiB,CAAjB;AACD,CATD","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy())\ntest.after.always(t => models.user.destroy())\n\ntest('list user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const list = await models.user.findAndCountAll()\n\n  t.is(list.count, 1)\n})\n\ntest('create user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  const result = await newUser.save()\n\n  t.is(result.dataValues.name, 'vinitest')\n})\n\ntest('remove user', async t => {\n  const userTest = { email: 'remover@gmail.com' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const removed = await models.user.destroy({ where: { email: 'remover@gmail.com' } })\n\n  t.is(removed, 1)\n})\n\ntest('update user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const userUpdated = { email: 'emailtest2@gmail.com' }\n  const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n  t.is(updated[0], 3)\n})\n"]}