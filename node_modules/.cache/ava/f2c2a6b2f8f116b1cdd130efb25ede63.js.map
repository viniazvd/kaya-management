{"version":3,"sources":["customers.test.js"],"names":["require","config","test","models","beforeEach","t","user","destroy","truncate","after","always","userTest","name","email","password","newUser","build","save","list","findAndCountAll","console","log","rows"],"mappings":";;AAAAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,MAAMC,OAAOF,QAAQ,KAAR,CAAb;;AAEA,MAAMG,SAASH,QAAQ,iCAAR,CAAf;;AAEAE,KAAKE,UAAL,CAAgBC,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAArB;AACAN,KAAKO,KAAL,CAAWC,MAAX,CAAkBL,KAAKF,OAAOG,IAAP,CAAYC,OAAZ,CAAoB,EAACC,UAAU,IAAX,EAApB,CAAvB;;AAEAN,KAAK,WAAL,EAAkB,MAAMG,CAAN,IAAW;AAC3B,QAAMM,WAAW,EAAEC,MAAM,UAAR,EAAoBC,OAAO,qBAA3B,EAAkDC,UAAU,KAA5D,EAAjB;AACA,QAAMC,UAAU,MAAMZ,OAAOG,IAAP,CAAYU,KAAZ,CAAkBL,QAAlB,CAAtB;AACA,QAAMI,QAAQE,IAAR,EAAN;;AAEA,QAAMC,OAAO,MAAMf,OAAOG,IAAP,CAAYa,eAAZ,EAAnB;AACAC,UAAQC,GAAR,CAAYH,KAAKI,IAAjB;AACA;AACD,CARD;;AAUA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"customers.test.js","sourcesContent":["require('dotenv').config()\n\nconst test = require('ava')\n\nconst models = require('../../../infra/sequelize/models')\n\ntest.beforeEach(t => models.user.destroy({truncate: true}))\ntest.after.always(t => models.user.destroy({truncate: true}))\n\ntest('list user', async t => {\n  const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n  const newUser = await models.user.build(userTest)\n  await newUser.save()\n\n  const list = await models.user.findAndCountAll()\n  console.log(list.rows)\n  // t.is(list.rows, 2)\n})\n\n// test('create user', async t => {\n//   const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n//   const newUser = await models.user.build(userTest)\n//   const result = await newUser.save()\n\n//   t.is(result.dataValues.email, 'emailtest@gmail.com')\n// })\n\n// test('remove user', async t => {\n//   const userTest = { email: 'remover@gmail.com' }\n//   const newUser = await models.user.build(userTest)\n//   await newUser.save()\n\n//   const removed = await models.user.destroy({ where: { email: 'remover@gmail.com' } })\n\n//   t.is(removed, 1)\n// })\n\n// test('update user', async t => {\n//   const userTest = { name: 'vinitest', email: 'emailtest@gmail.com', password: '123' }\n//   const newUser = await models.user.build(userTest)\n//   await newUser.save()\n\n//   const userUpdated = { email: 'emailtest2@gmail.com' }\n//   const updated = await models.user.update(userUpdated, { where: { email: 'emailtest@gmail.com' } })\n\n//   t.is(updated[0], 3)\n// })\n"]}